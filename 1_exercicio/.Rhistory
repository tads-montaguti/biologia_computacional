help()
help.start()
library(readr)
data1 <- read.csv("../vaccination-data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("../vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("../vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("/Users/adrianomontaguti/ufpr/bio_ds879/vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data2 <- read.csv("/Users/adrianomontaguti/ufpr/bio_ds879/covid_global_data.csv", header=TRUE, stringsAsFactors=FALSE)
class(data1)
class(data2)
summary(data1)
plot <- add_trace(
plot,
x = ~region_data$PERIOD,
y = ~region_data$COUNT,
type = 'bar',
name = region,
marker = list(color = region_colors[region])
)
# Navegar automaticamente para o diretório onde o script está executando
#install.packages("rstudioapi")
# install.packages("plotly")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("~/ufpr/bio_ds879/1_exercicio/EaD1_Script1.R", echo=TRUE)
source("~/ufpr/bio_ds879/1_exercicio/EaD1_Script1_202412072052.R", echo=TRUE)
source("~/ufpr/bio_ds879/1_exercicio/EaD1_Script1_202412072052.R", echo=TRUE)
source("~/ufpr/bio_ds879/1_exercicio/EaD1_Script1_202412072052.R", echo=TRUE)
# install.packages("rstudioapi")
# install.packages("plotly")
library(plotly)
library(dplyr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_df <- read.table(
file = "./vaccination-data.csv",
sep=",",
quote="\"",
header = T, stringsAsFactors = F
)
# Cria um novo dataframe contendo as 4 colunas especificadas
filtered_data <- data_df[
(!is.na(data_df$FIRST_VACCINE_DATE) & data_df$WHO_REGION != ""),
c("COUNTRY", "ISO3", "FIRST_VACCINE_DATE", "WHO_REGION"
)]
# Transforma a coluna em questão para ser do tipo data e ordena a tabela com base nesta coluna
class(filtered_data$FIRST_VACCINE_DATE)
filtered_data$FIRST_VACCINE_DATE <- as.Date(filtered_data$FIRST_VACCINE_DATE)
# Menor valor dentre a coluna $FIRST_VACCINE_DATE removendo os NA
first_vaccine_day <- min(filtered_data$FIRST_VACCINE_DATE, na.rm=TRUE)
# Adiciona a coluna $DELAY_DAYS sendo a diferença entre a $FIRST_VACCINE_DATE e first_vaccine_day
filtered_data$DELAY_DAYS <- as.numeric(
filtered_data$FIRST_VACCINE_DATE - first_vaccine_day
)
#### Apresentação ####
# Criar períodos de mês em mês a partir de 'first_vaccine_day'
filtered_data$PERIOD <- cut(
filtered_data$FIRST_VACCINE_DATE,
breaks = seq(
as.Date(first_vaccine_day),
max(filtered_data$FIRST_VACCINE_DATE, na.rm = TRUE) + 30,
by = "1 month"
),
include.lowest = TRUE,
right = FALSE
)
# Transformar o período em um formato legível
period_labels <- levels(filtered_data$PERIOD)
print(period_labels)
# Criar uma tabela com contagem por WHO_REGION e período
period_counts <- table(filtered_data$WHO_REGION, filtered_data$PERIOD)
print(period_counts)
# Criar uma paleta de cores básica
palette <- colors()
selected_colors <- palette[seq(
1,
length(palette),
length.out = length(unique(period_df$WHO_REGION))
)]
# Converter para um data frame para plotagem
period_df <- as.data.frame(period_counts)
selected_colors <- palette[seq(
1,
length(palette),
length.out = length(unique(period_df$WHO_REGION))
)]
selected_colors <- palette[seq(
1,
length(palette),
length.out = length(unique(period_df$WHO_REGION))
)]
region_colors <- setNames(selected_colors, unique(period_df$WHO_REGION))
selected_colors <- palette[seq(
1,
length(palette),
length.out = length(unique(period_df$WHO_REGION))
)]
print(selected_colors)
# Criar uma paleta de cores básica
palette <- colors()
print(palette)
selected_colors <- palette[seq(
1,
length(palette),
length.out = length(unique(period_df$WHO_REGION))
)]
print(selected_colors)
print(period_df)
selected_colors <- palette[seq(1, length(palette), length.out = length(unique(period_df$WHO_REGION))
)]
print(selected_colors)
print(length(palette))
print(unique(period_df$WHO_REGION))
print(period_df$WHO_REGION)
colnames(period_df) <- c("WHO_REGION", "PERIOD", "COUNT")
print(period_df$WHO_REGION)
# Criar uma paleta de cores básica
palette <- colors()
selected_colors <- palette[seq(1, length(palette), length.out = length(unique(period_df$WHO_REGION)))]
print(selected_colors)
region_colors <- setNames(selected_colors, unique(period_df$WHO_REGION))
print(region_colors)
# Criar o gráfico de barras agrupadas
plot <- plot_ly()
breaks = seq(
as.Date(first_vaccine_day),
max(filtered_data$FIRST_VACCINE_DATE, na.rm = TRUE) + 30,
by = "1 month"
)
print(breaks)
# Cria um array contendo as datas espaçadas de 30 em 30 dias entre first_vaccine_day
# e o maior valor presente no filtered_data
periods = seq(
as.Date(first_vaccine_day),
as.Date(last_vaccine_day) + 30,
by = "1 month"
)
last_vaccine_day <- max(filtered_data$FIRST_VACCINE_DATE, na.rm = TRUE)
# Cria um array contendo as datas espaçadas de 30 em 30 dias entre first_vaccine_day
# e o maior valor presente no filtered_data
periods = seq(
as.Date(first_vaccine_day),
as.Date(last_vaccine_day) + 30,
by = "1 month"
)
print(periods)
help("cut")
# Cria uma nova coluna $PERIOD informando em qual intervalo de periods aquela linha está contida
filtered_data$PERIOD <- cut(
filtered_data$FIRST_VACCINE_DATE,
periods,
include.lowest = TRUE,
right = FALSE
)
help("levels")
print(period_labels)
levels(filtered_data$PERIOD) <- format(
as.Date(sub("\\[(.+),.*", "\\1", period_labels)), "%Y-%m"
)
print(period_labels)
print(filtered_data$PERIOD)
help("cut")
# Adicionar barras para cada WHO_REGION
unique_regions <- unique(period_df$WHO_REGION)
print(unique_regions)
Sys.setenv(LANGUAGE = "pt_BR")
help("cut")
Sys.setenv(LANGUAGE = "pt_BR")
help("cut")
# Adicionar barras para cada WHO_REGION
unique_regions <- unique(period_df$WHO_REGION)
print(unique_regions)
print(filtered_data$PERIOD)
region_colors <- setNames(selected_colors, unique(period_df$WHO_REGION))
print(region_colors)
# Adicionar barras para cada WHO_REGION
unique_regions <- unique(period_df$WHO_REGION)
print(unique_regions)
for (region in unique_regions) {
region_data <- subset(period_df, WHO_REGION == region)
plot <- add_trace(
plot,
x = ~region_data$PERIOD,
y = ~region_data$COUNT,
type = 'bar',
name = region,
marker = list(color = region_colors[region])
)
}
# Configurar layout do gráfico
plot <- layout(
plot,
yaxis = list(title = "Count"),
xaxis = list(title = "Period (monthly)"),
barmode = "group",
title = "Occurrences of FIRST_VACCINE_DATE by WHO Region"
)
# Mostrar o gráfico
plot
period_counts <- table(filtered_data$WHO_REGION, filtered_data$PERIOD)
print(period_counts)
# Criar uma tabela com contagem por WHO_REGION e período
period_counts <- table(filtered_data$WHO_REGION, filtered_data$PERIOD)
print(period_counts)
# Criar o gráfico de barras agrupadas
plot <- plot_ly()
# Adicionar barras para cada WHO_REGION
unique_regions <- unique(period_df$WHO_REGION)
print(unique_regions)
for (region in unique_regions) {
region_data <- subset(period_df, WHO_REGION == region)
plot <- add_trace(
plot,
x = region_data$PERIOD,  # Use diretamente a coluna PERIOD
y = region_data$COUNT,    # Use diretamente a coluna COUNT
type = 'bar',
name = region,
marker = list(color = region_colors[region])
)
}
# Configurar layout do gráfico
plot <- layout(
plot,
yaxis = list(title = "Count"),
xaxis = list(title = "Period (monthly)"),
barmode = "group",
title = "Occurrences of FIRST_VACCINE_DATE by WHO Region"
)
# Mostrar o gráfico
plot
