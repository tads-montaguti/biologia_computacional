help()
help.start()
library(readr)
data1 <- read.csv("../vaccination-data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("../vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("../vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("/Users/adrianomontaguti/ufpr/bio_ds879/vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data2 <- read.csv("/Users/adrianomontaguti/ufpr/bio_ds879/covid_global_data.csv", header=TRUE, stringsAsFactors=FALSE)
class(data1)
class(data2)
summary(data1)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
E(g)$weight <- pmax(0, E(g)$weight)
V(g)$name <- data_clean$COUNTRY
plot(g,
vertex.label = V(g)$name,
edge.width = E(g)$weight * 5,  # Ajustar tamanho das arestas baseado no peso
vertex.size = 8,
vertex.color = "lightblue",
layout = layout_with_fr,  # Layout para melhor visualização
main = "Rede de Associação: Vacinação vs Mortalidade")
plot(g,
vertex.label = V(g)$name,
edge.width = E(g)$weight * 5,  # Ajustar largura das arestas
vertex.size = 8,
vertex.color = "lightblue",
layout = layout_with_fr,  # Usar Fruchterman-Reingold
main = "Rede de Associação: Vacinação vs Mortalidade")
# Carregar o arquivo RData
load("./merge_df12.RData")
g <- make_empty_graph()
g <- make_graph(edges = c(1, 2, 1, 5), n = 10, directed = FALSE)
g
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
# install.packages("igraph")
# install.packages("rstudioapi")
library(igraph)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
g <- make_empty_graph()
g <- make_graph(edges = c(1, 2, 1, 5), n = 10, directed = FALSE)
summary(g)
plot(g)
# # Carregar o arquivo RData
load("./merge_df12.RData")
# # Verificar o conteúdo do dataset
ls()
head(merge_df12)
colnames(merge_df12)
grouped_countries <- aggregate(
COUNTRY ~ WHO_REGION,
data = merge_df12,
FUN = function(x) list(unique(x))
)
grouped_countries[3:]
grouped_countries[:3]
grouped_countries[3]
grouped_countries[3]:
grouped_countries[0]
grouped_countries[1]
grouped_countries[2]
colnames(grouped_countries)
colnames(grouped_countries[2])
colnames(grouped_countries)
edges <- list() #Lista de arestas vazia
#
data_selected <- merge_df12[, c("COUNTRY", "WHO_REGION")]
# Iterando para cada $WHO_REGION diferente
unique_regions <- unique(data_selected$WHO_REGION)
for (region in unique_regions) {
# Selecionar os países na região
countries <- data_selected$COUNTRY[data_selected$WHO_REGION == region]
# Populando os vértices
if (length(countries) > 1) {
for (i in 1:(length(countries) - 1)) {
for (j in (i + 1):length(countries)) {
edges <- append(edges, list(c(countries[i], countries[j])))
}
}
}
}
# Matriz de arestas
edges_matrix <- matrix(NA, nrow = 0, ncol = 2)
# Iterando sobre os vértices
for (edge in edges) {
edges_matrix <- rbind(edges_matrix, edge)
}
# Cria o grafo a partir da lista de arestas (matriz de arestas)
g <- graph_from_edgelist(edges_matrix, directed = FALSE)
#
V(g)$label <- V(g)$name
plot(
g,
vertex.label = V(g)$label,
vertex.size = 8,
vertex.color = "lightblue",
edge.color = "gray",
main = "Grafo de Países por Região WHO"
)
#
V(g)$label <- ""
plot(
g,
vertex.label = V(g)$label,
vertex.size = 8,
vertex.color = "lightblue",
edge.color = "gray",
main = "Grafo de Países por Região WHO"
)
unique_regions <- unique_regions[1]
for (region in unique_regions) {
# Selecionar os países na região
countries <- data_selected$COUNTRY[data_selected$WHO_REGION == region]
# Populando os vértices
if (length(countries) > 1) {
for (i in 1:(length(countries) - 1)) {
for (j in (i + 1):length(countries)) {
edges <- append(edges, list(c(countries[i], countries[j])))
}
}
}
}
# Matriz de arestas
edges_matrix <- matrix(NA, nrow = 0, ncol = 2)
# Iterando sobre os vértices
for (edge in edges) {
edges_matrix <- rbind(edges_matrix, edge)
}
# Cria o grafo a partir da lista de arestas (matriz de arestas)
g <- graph_from_edgelist(edges_matrix, directed = FALSE)
#
V(g)$label <- V(g)$name
plot(
g,
vertex.label = V(g)$label,
vertex.size = 8,
vertex.color = "lightblue",
edge.color = "gray",
main = "Grafo de Países por Região WHO"
)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
colnames(merge_df12)
# install.packages("igraph")
# install.packages("rstudioapi")
library(igraph)
# # Carregar o arquivo RData
load("./merge_df12.RData")
# # Verificar o conteúdo do dataset
ls()
head(merge_df12)
colnames(merge_df12)
data_clean <- merge_df12[!is.na(merge_df12$Cases_cumulative_total_per_100000_population) &
!is.na(merge_df12$Deaths_cumulative_total_per_100000_population) &
!is.na(merge_df12$FIRST_VACCINE_DATE), ]
# Média de Cases_cumulative_total_per_100000_population
mean_cases <- mean(data_clean$Cases_cumulative_total_per_100000_population)
# Média de Deaths_cumulative_total_per_100000_population
mean_deaths <- mean(data_clean$Deaths_cumulative_total_per_100000_population)
# Data da primeira vacina
min_vaccine_date <- min(as.Date(data_clean$FIRST_VACCINE_DATE, format = "%Y-%m-%d"))
# Data da primeira vacina
min_vaccine_date <- min(as.Date(data_clean$FIRST_VACCINE_DATE, format = "%Y-%m-%d"))
# Data da primeira vacina
min_vaccine_date <- min(as.Date(data_clean$FIRST_VACCINE_DATE, format = "%Y-%m-%d", na.rm = TRUE))
# Data da primeira vacina
data_clean$DELAY_DAYS <- as.numeric(
data_clean$FIRST_VACCINE_DATE - min(
data_clean$FIRST_VACCINE_DATE,
na.rm = TRUE
)
)
# Data da primeira vacina
data_clean$DELAY_DAYS <- as.numeric(
data_clean$FIRST_VACCINE_DATE - min(
data_clean$FIRST_VACCINE_DATE,
na.rm = TRUE
)
)
data_clean$FIRST_VACCINE_DATE <- as.Date(filtered_data$FIRST_VACCINE_DATE)
data_clean$FIRST_VACCINE_DATE <- as.Date(data_clean$FIRST_VACCINE_DATE)
# Data da primeira vacina
data_clean$DELAY_DAYS <- as.numeric(
data_clean$FIRST_VACCINE_DATE - min(
data_clean$FIRST_VACCINE_DATE,
na.rm = TRUE
)
)
data_clean[:$DELAYS_DAY]
data_clean[$DELAYS_DAY]
data_clean[1$DELAYS_DAY]
data_clean[1]$DELAYS_DAY
data_clean[2]$DELAYS_DAY
data_clean <- merge_df12[
!is.na(merge_df12$Cases_cumulative_total_per_100000_population) &
!is.na(merge_df12$Deaths_cumulative_total_per_100000_population) &
!is.na(merge_df12$FIRST_VACCINE_DATE), ]
class(data_clean$FIRST_VACCINE_DATE)
data_clean$FIRST_VACCINE_DATE <- as.Date(data_clean$FIRST_VACCINE_DATE)
class(data_clean$FIRST_VACCINE_DATE)
# Média de Cases_cumulative_total_per_100000_population
mean_cases <- int(mean(data_clean$Cases_cumulative_total_per_100000_population))
# Média de Cases_cumulative_total_per_100000_population
mean_cases <- as.integer(mean(data_clean$Cases_cumulative_total_per_100000_population))
# Média de Deaths_cumulative_total_per_100000_population
mean_deaths <- as.integer(mean(data_clean$Deaths_cumulative_total_per_100000_population))
first_vac_date = min(data_clean$FIRST_VACCINE_DATE)
first_vac_date = min(data_clean$FIRST_VACCINE_DATE, na.rm = TRUE)
# Data da primeira vacina
data_clean$DELAY_DAYS <- as.numeric(data_clean$FIRST_VACCINE_DATE - first_vac_date)
data_clean[2]$DELAYS_DAY
data_clean[2]$DELAY_DAYS
data_clean[3]$DELAY_DAYS
data_clean[$DELAY_DAYS]
data_clean$DELAY_DAYS
# Data da primeira vacina
data_clean$DELAY_DAYS <- as.numeric(data_clean$FIRST_VACCINE_DATE - first_vac_date, na.rm=TRUE)
data_clean$DELAY_DAYS
# Data da primeira vacina
data_clean$DELAY_DAYS <- as.numeric(data_clean$FIRST_VACCINE_DATE - first_vac_date)
data_clean <- data_clean[!is.na(data_clean$DELAY_DAYS), ]
data_clean$DELAY_DAYS
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
top_countries <- top_deaths[1:10, ]
top_countries <- top_countries[1:10, ]
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
edges <- data.frame(from = character(), to = character(), weight = numeric(), stringsAsFactors = FALSE)
for (i in 1:(nrow(top_deaths) - 1)) {
for (j in (i + 1):nrow(top_deaths)) {
country1 <- top_deaths$COUNTRY[i]
country2 <- top_deaths$COUNTRY[j]
weight <- abs(top_deaths$DELAY_DAYS[i] - top_deaths$DELAY_DAYS[j]) +
abs(top_deaths$Deaths_cumulative_total[i] - top_deaths$Deaths_cumulative_total[j])
edges <- rbind(edges, data.frame(from = country1, to = country2, weight = weight))
}
}
g <- graph_from_data_frame(edges, directed = FALSE)
plot(
g,
vertex.label = V(g)$name,
vertex.size = 10,
edge.width = E(g)$weight / max(E(g)$weight) * 5,  # Ajusta largura com base nos pesos normalizados
vertex.color = "lightblue",
edge.color = "gray",
layout = layout_with_fr,
main = "Grafo de Países com Maior Mortalidade"
)
plot(
g,
vertex.label = V(g)$name,
vertex.size = 10,
edge.width = E(g)$weight / max(E(g)$weight) * 2,  # Ajusta largura com base nos pesos normalizados
vertex.color = "lightblue",
edge.color = "gray",
layout = layout_with_fr,
main = "Grafo de Países com Maior Mortalidade"
)
threshold <- 30
for (i in 1:(nrow(top_deaths) - 1)) {
for (j in (i + 1):nrow(top_deaths)) {
country1 <- top_deaths$COUNTRY[i]
country2 <- top_deaths$COUNTRY[j]
delay_diff <- abs(top_deaths$DELAY_DAYS[i] - top_deaths$DELAY_DAYS[j])
# Adicionar aresta somente se a diferença for menor que o threshold
if (delay_diff < threshold) {
weight <- abs(top_deaths$Deaths_cumulative_total[i] - top_deaths$Deaths_cumulative_total[j])
edges <- rbind(edges, data.frame(from = country1, to = country2, weight = weight))
}
}
}
g <- graph_from_data_frame(edges, directed = FALSE)
plot(
g,
vertex.label = V(g)$name,
vertex.size = 10,
edge.width = E(g)$weight / max(E(g)$weight) * 2,  # Ajusta largura com base nos pesos normalizados
vertex.color = "lightblue",
edge.color = "gray",
layout = layout_with_fr,
main = "Grafo de Países com Maior Mortalidade"
)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
data_clean$FIRST_VACCINE_DATE <- as.Date(data_clean$FIRST_VACCINE_DATE)
selected_countries <- data_clean[1:15, ]
first_vac_date <- min(selected_countries$FIRST_VACCINE_DATE, na.rm = TRUE)
selected_countries$DELAY_DAYS <- as.numeric(selected_countries$FIRST_VACCINE_DATE - first_vac_date)
threshold <- 30
library(igraph)
library(igraph)
edges <- data.frame(from = character(), to = character(), weight = numeric(), stringsAsFactors = FALSE)
for (i in 1:(nrow(selected_countries) - 1)) {
for (j in (i + 1):nrow(selected_countries)) {
country1 <- selected_countries$COUNTRY[i]
country2 <- selected_countries$COUNTRY[j]
delay_diff <- abs(selected_countries$DELAY_DAYS[i] - selected_countries$DELAY_DAYS[j])
# Adicionar aresta somente se a diferença for menor que o threshold
if (delay_diff <= threshold) {
edges <- rbind(edges, data.frame(from = country1, to = country2, weight = delay_diff))
}
}
}
g <- graph_from_data_frame(edges, directed = FALSE)
plot(
g,
vertex.label = V(g)$name,
vertex.size = 10,
edge.width = 1 + E(g)$weight / max(E(g)$weight),  # Ajusta largura com base nos pesos normalizados
vertex.color = "lightblue",
edge.color = "gray",
layout = layout_with_fr,
main = paste("Grafo de Proximidade Temporal (Threshold:", threshold, "dias)")
)
E(g)$weight <- E(g)$weight + 1
plot(
g,
vertex.label = V(g)$name,
vertex.size = 10,
edge.width = 1 + E(g)$weight / max(E(g)$weight),  # Ajusta largura com base nos pesos normalizados
vertex.color = "lightblue",
edge.color = "gray",
layout = layout_with_fr,
main = paste("Grafo de Proximidade Temporal (Threshold:", threshold, "dias)")
)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
# Cria a coluna de DELYA_DAYS para cada país
selected_countries$DELAY_DAYS <- as.numeric(selected_countries$FIRST_VACCINE_DATE - first_vac_date)
View(selected_countries)
View(selected_countries)
# Cria a coluna de DELYA_DAYS para cada país
selected_countries$DELAY_DAYS <- as.numeric(selected_countries$FIRST_VACCINE_DATE - first_vac_date, na.rm=TRUE)
# Threshold para definir se a relação entre os países (menor que 30 então conecta-se)
threshold <- 30
# Cria um dataframe vazio para armazenar as arestas
edges <- data.frame(from = character(), to = character(), weight = numeric(), stringsAsFactors = FALSE)
for (i in 1:(nrow(selected_countries) - 1)) {
for (j in (i + 1):nrow(selected_countries)) {
country1 <- selected_countries$COUNTRY[i]
country2 <- selected_countries$COUNTRY[j]
delay_diff <- abs(selected_countries$DELAY_DAYS[i] - selected_countries$DELAY_DAYS[j])
# Adicionar aresta somente se a diferença for menor que o threshold
if (delay_diff <= threshold) {
edges <- rbind(edges, data.frame(from = country1, to = country2, weight = delay_diff))
}
}
}
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
