help()
help.start()
library(readr)
data1 <- read.csv("../vaccination-data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("../vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("../vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data1 <- read.csv("/Users/adrianomontaguti/ufpr/bio_ds879/vaccination_data.csv", header=TRUE, stringsAsFactors=FALSE)
data2 <- read.csv("/Users/adrianomontaguti/ufpr/bio_ds879/covid_global_data.csv", header=TRUE, stringsAsFactors=FALSE)
class(data1)
class(data2)
summary(data1)
source("~/ufpr/bio_ds879/1_exercicio/EaD1_Script1_20241218_1700.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
print(colnames(merge_df12))
write.csv(merge_df12, "merge_df12.csv", row.names=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
sum(colnames(df1) %in% colnames(df2))
colnames(merge_df12)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
colnames(merge_df12)
# Filtrar os dados para uma região específica
selected_region <- "AMRO"  # Substitua pelo WHO_REGION desejado
filtered_data <- subset(merge_df12, WHO_REGION == selected_region)
# Criar um identificador para a legenda combinando ISO3 e COUNTRY
filtered_data$Legend <- paste(filtered_data$ISO3, "-", filtered_data$COUNTRY)
print(filtered_data$Legend)
plot_data <- pivot_longer(
filtered_data[, c("CountryLabel", "Cases_cumulative_total_per_100000_population", "Deaths_cumulative_total_per_100000_population")],
cols = c(Cases_cumulative_total_per_100000_population, Deaths_cumulative_total_per_100000_population),
names_to = "Metric",
values_to = "Value"
)
filtered_data$CountryLabel <- paste(filtered_data$ISO3, "-", filtered_data$COUNTRY)
plot_data <- pivot_longer(
filtered_data[, c("CountryLabel", "Cases_cumulative_total_per_100000_population", "Deaths_cumulative_total_per_100000_population")],
cols = c(Cases_cumulative_total_per_100000_population, Deaths_cumulative_total_per_100000_population),
names_to = "Metric",
values_to = "Value"
)
metric_colors <- c(
"Cases_cumulative_total_per_100000_population" = "yellow",
"Deaths_cumulative_total_per_100000_population" = "red"
)
plot <- plot_ly(
data = plot_data,
x = ~CountryLabel,
y = ~Value,
type = 'bar',
color = ~Metric,
colors = metric_colors,
text = ~Value,
textposition = "outside"
)
plot <- layout(
plot,
title = paste("Cases vs Deaths (per 100,000) -", selected_region),
xaxis = list(
title = "Country",
categoryorder = "array",
categoryarray = unique(plot_data$CountryLabel),
tickangle = -45,
tickvals = unique(plot_data$CountryLabel),
ticktext = unique(plot_data$CountryLabel)
),
yaxis = list(title = "Values per 100,000 Population"),
barmode = "group",
bargap = 0.4,  # Espaçamento entre grupos de barras
bargroupgap = 0.6  # Espaçamento entre países
)
# Mostrar o gráfico
plot
plot <- layout(
plot,
title = paste("Cases vs Deaths (per 100,000) -", selected_region),
xaxis = list(
title = "Country",
categoryorder = "array",
categoryarray = unique(plot_data$ISO3),
tickangle = -45,
tickvals = unique(plot_data$CountryLabel),
ticktext = unique(plot_data$CountryLabel)
),
yaxis = list(title = "Values per 100,000 Population"),
barmode = "group",
bargap = 0.4,  # Espaçamento entre grupos de barras
bargroupgap = 0.6  # Espaçamento entre países
)
plot_data <- pivot_longer(
filtered_data[, c("ISO3", "CountryLabel", "Cases_cumulative_total_per_100000_population", "Deaths_cumulative_total_per_100000_population")],
cols = c(ISO3, Cases_cumulative_total_per_100000_population, Deaths_cumulative_total_per_100000_population),
names_to = "Metric",
values_to = "Value"
)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
colnames(merge_df12)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
#### FILTERING DATA ####
filtered_data <- merge_df12[!is.na(filtered_data$Deaths_newly_reported_in_last_7_days) &
!is.na(filtered_data$Cases_newly_reported_in_last_7_days), ]
#### FILTERING DATA ####
filtered_data <- merge_df12[!is.na(filtered_data$Deaths_newly_reported_in_last_7_days) &
!is.na(filtered_data$Cases_newly_reported_in_last_7_days), ]
#### FILTERING DATA ####
filtered_data <- merge_df12[!is.na(merge_df12$Deaths_newly_reported_in_last_7_days) &
!is.na(merge_df12$Cases_newly_reported_in_last_7_days), ]
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/2_exercicio/script.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
vignette("RedeR")
library("RedeR")
library("igraph")
startRedeR()
gtoy1 <- graph.lattice(c(3,3,3))
startRedeR()
gtoy1 <- graph.lattice(c(3,3,3))
addGraphToRedeR(g=gtoy1, layout=layout_with_kk(gtoy1))
gtoy2 <- getGraphFromRedeR()
summary(gtoy2)
resetRedeR()
library("RedeR")
library("igraph")
#### VIGNETTE ####
vignette("RedeR")
library("TreeAndLeaf")
vignette("RedeR")
if (!require("BiocManager", quietly = TRUE)) {
vignette("RedeR")
}
if (!require(BiocManager)) install.packages("BiocManager")
if (!require(igraph)) install.packages("igraph")
if (!require(TreeAndLeaf)) install.packages("TreeAndLeaf")
if (!require("TreeAndLeaf")) install.packages("TreeAndLeaf")
BiocManager::install("TreeAndLeaf")
library(igraph)
#### VIGNETTE ####
vignette("RedeR")
#### STARTTING UP REDER ####
resetRedeR()
startRedeR()
#-- Generate an 'hclust' object from the 'iris' dataset
hc_iris <- hclust(dist(iris[,-5]))
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc_iris)
library("TreeAndLeaf")
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc_iris)
#--- Map 'iris' variables to the tree-and-leaf graph
#Note: 'refcol = 0' indicates that 'iris' rownames will be used as mapping IDs
tal <- att.mapv(g = tal, dat = iris, refcol = 0)
#--- Set node attributes using the 'att.setv' wrapper function
cols <- c("#80b1d3","#fb8072","#8dd3c7")
tal <- att.setv(tal, from="Species", to="nodeColor", cols=cols)
tal <- att.setv(tal, from="Species", to="nodeLineColor", cols=cols)
tal <- att.setv(tal, from="Petal.Width", to="nodeSize", nquant=6, xlim=c(5,50,1))
#--- Set other attributes using igraph shortcuts
V(tal)$nodeLabel <- ""
E(tal)$edgeLineColor <- "grey70"
#--- Send the tree-and-leaf graph to RedeR
addGraphToRedeR(tal, zoom=50)
#--- Suggestion: anchor inner nodes to adjust the final layout
selectNodes(V(tal)$name[!V(tal)$isLeaf], anchor=TRUE)
#--- Call 'relax' to fine-tune the leaf nodes
relaxRedeR(p1=10, p2=100, p3=5, p4=120, p5=1, p6=100)
#--- Add legends
addLegendToRedeR(tal, type="nodecolor", title="Species", stretch=0.2)
addLegendToRedeR(tal, type="nodesize", title="PetalWidth")
source("~/.active-rstudio-document", echo=TRUE)
resetRedeR()
source("~/ufpr/bio_ds879/3_exercicio/script_3.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
# Filtra os dados da região especificada
selected_countries <- data_clean[data_clean$WHO_REGION == selected_region, ]
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
rdp <- RedPort()
calld(rdp)
V(g)$color <- "lightblue"
V(g)$size <- 10
V(g)$label <- V(g)$name
E(g)$width <- E(g)$weight / max(E(g)$weight) * 5  # Normaliza as larguras das arestas
rdp$addGraph(g)
# Ajusta a visualização
rdp$relax()
rdp$setLayout(layout = "fruchtermanreingold")  # Define o layout
rdp$setVertexLabelColor(color = "black")      # Cor dos rótulos dos vértices
rdp$setEdgeColor(color = "gray")
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
g <- graph_from_data_frame(edges, directed = FALSE)
E(g)$weight <- E(g)$weight + 1
plot(
g,
vertex.label = V(g)$name,
vertex.size = 10,
edge.width = 1 + E(g)$weight / max(E(g)$weight),  # Ajusta largura com base nos pesos normalizados
vertex.color = "lightblue",
edge.color = "gray",
layout = layout_with_fr,
main = paste("Grafo de Proximidade Temporal (Threshold:", threshold, "dias)")
)
startRedeR()
addGraphToRedeR(g, zoom=50)
startRedeR()
addGraphToRedeR(g)
startRedeR()
addGraphToRedeR(g)
startRedeR()
addGraphToRedeR(g)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
addGraphToRedeR(rdp, g)
g <- graph_from_data_frame(edges, directed = FALSE)
clusters <- clusters(g)$membership
addGraphToRedeR(rdp, g)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
addGraph(g)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
print(clusters)
plot(clusters)
addGraphToRedeR(clusters)
clusters <- clusters(g)$membership
addGraphToRedeR(clusters)
startRedeR()
addGraphToRedeR(g)
addGraphToRedeR(clusters)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
relaxRedeR()
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
source("~/ufpr/bio_ds879/trabalho_final/script.R", echo=TRUE)
